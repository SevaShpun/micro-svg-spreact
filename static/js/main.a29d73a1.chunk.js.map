{"version":3,"sources":["github.svg","codepen.svg","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","url","template","_ref","defs","refs","style","concat","penSettings","title","description","tags","editors","App","state","output","loading","copied","error","optimize","tidy","cname","createRef","onDrop","files","svgs","names","map","file","name","replace","_loop","i","reader","FileReader","readAsText","onload","_ref2","target","push","result","length","_this","processInput","input","_this$state","setState","data","className","current","value","axios","method","then","res","catch","e","resetOutput","handleOptimized","prevState","handleTidy","downloadDemo","_this$state2","element","document","createElement","html","Blob","type","fileURL","window","URL","createObjectURL","setAttribute","display","body","appendChild","click","removeChild","revokeObjectURL","downloadSprite","_this$state3","href","download","prefillPen","_this$state$output","JSON","stringify","Object","objectSpread","css","css_starter","_this2","this","clipboard","Clipboard","on","clearSelection","_this$state4","penValue","react_default","a","react","es","key","accept","disabled","multiple","onDropAccepted","activeClassName","rejectClassName","src","alt","data-clipboard-target","onClick","action","codepenLogo","id","githubLogo","checked","onChange","ref","defaultValue","rows","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","ReactDOM","render","src_App","getElementById","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,2UCQlCC,EAGA,oCAEAC,EAAW,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAMC,EAATF,EAASE,KAAMC,EAAfH,EAAeG,MAAf,2pBAAAC,OAuBTD,EAvBS,kFAAAC,OA6BXH,EA7BW,sMAAAG,OAqCXF,EArCW,kBAyCXG,EAAc,CAClBC,MAAO,cACPC,YACE,4FACFC,KAAM,CAAC,MAAO,aAAc,SAAU,eACtCC,QAAS,QA0PIC,6MAtPbC,MAAQ,CACNC,OAAQ,KACRC,SAAS,EACTC,QAAQ,EACRC,OAAO,EACPC,UAAU,EACVC,MAAM,KAGRC,MAAQC,wBACRhB,MAAQgB,wBAURC,OAAS,SAAAC,GAGP,IAFA,IAAIC,EAAO,GACLC,EAAQF,EAAMG,IAAI,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,QAAQ,OAAQ,MAF1CC,EAAA,SAGPC,GACP,IAAMJ,EAAOJ,EAAMQ,GACbC,EAAS,IAAIC,WACnBD,EAAOE,WAAWP,EAAM,SACxBK,EAAOG,OAAS,SAAAC,GAAgB,IAAbC,EAAaD,EAAbC,OACjBb,EAAKc,KAAKD,EAAOE,QACbR,IAAMR,EAAMiB,OAAS,GACvBC,EAAKC,aAAalB,EAAMC,KAPrBM,EAAI,EAAGA,EAAIR,EAAMiB,OAAQT,IAAKD,EAA9BC,MAaXW,aAAe,SAACC,EAAOlB,GAAU,IAAAmB,EACJH,EAAK5B,MAAxBK,EADuB0B,EACvB1B,SAAUC,EADayB,EACbzB,KAClBsB,EAAKI,SAAS,CAAE9B,SAAS,EAAMC,QAAQ,EAAOC,OAAO,IACrD,IAAM6B,EAAO,CACXH,QACAxB,OACAD,WACAO,QACAsB,UAAWN,EAAKrB,MAAM4B,QAAQC,OAEhCC,IAAM,CACJlD,MACAmD,OAAQ,OACRL,SAECM,KAAK,SAAAC,GAAG,OAAIZ,EAAKI,SAAS,CAAE/B,OAAQuC,EAAIP,KAAM/B,SAAS,MACvDuC,MAAM,SAAAC,GACLd,EAAKI,SAAS,CACZ9B,SAAS,EACTD,OAAQ,KACRG,OAAO,SAKfuC,YAAc,kBAAMf,EAAKI,SAAS,CAAE/B,OAAQ,KAAME,QAAQ,OAE1DyC,gBAAkB,WAChBhB,EAAKI,SAAS,SAAAa,GAAS,MAAK,CAC1BxC,UAAWwC,EAAUxC,eAIzByC,WAAa,WACXlB,EAAKI,SAAS,SAAAa,GAAS,MAAK,CAC1BvC,MAAOuC,EAAUvC,WAIrByC,aAAe,WAAM,IAAAC,EACgBpB,EAAK5B,MAAhCC,EADW+C,EACX/C,OAAQC,EADG8C,EACH9C,QAASE,EADN4C,EACM5C,MACzB,GAAIH,IAAWC,IAAYE,EAAO,CAChC,IAAM6C,EAAUC,SAASC,cAAc,KAC/B5D,EAAeU,EAAfV,KAAMD,EAASW,EAATX,KACR8D,EAAOhE,EAAS,CACpBE,OACAC,OACAC,MAAOoC,EAAKpC,MAAM2C,QAAQC,QAEtBtB,EAAO,IAAIuC,KAAK,CAACD,GAAO,CAC5BE,KAAM,cAEFC,EAAUC,OAAOC,IAAIC,gBAAgB5C,GAC3CmC,EAAQU,aAAa,OAAQJ,GAC7BN,EAAQU,aAAa,WAArB,aACAV,EAAQzD,MAAMoE,QAAU,OACxBV,SAASW,KAAKC,YAAYb,GAC1BA,EAAQc,QACRb,SAASW,KAAKG,YAAYf,GAC1BO,OAAOC,IAAIQ,gBAAgBV,OAI/BW,eAAiB,WAAM,IAAAC,EACcvC,EAAK5B,MAAhCC,EADakE,EACblE,OAAQC,EADKiE,EACLjE,QAASE,EADJ+D,EACI/D,MACzB,GAAIH,IAAWC,IAAYE,EAAO,CAChC,IAAM6C,EAAUC,SAASC,cAAc,KAC/B7D,EAASW,EAATX,KACFwB,EAAO,IAAIuC,KAAK,CAAC/D,GAAO,CAC5BgE,KAAM,kBAEFC,EAAUE,IAAIC,gBAAgB5C,GACpCmC,EAAQmB,KAAOb,EACfN,EAAQoB,SAAR,aACApB,EAAQc,QACRP,OAAOC,IAAIQ,gBAAgBV,OAI/Be,WAAa,WAAM,IAAAC,EAGb3C,EAAK5B,MADPC,OAAUX,EAFKiF,EAELjF,KAAMC,EAFDgF,EAEChF,KAElB,OAAOiF,KAAKC,UAALC,OAAAC,EAAA,EAAAD,CAAA,GACFhF,EADE,CAEL0D,KAAI,8BAAA3D,OACRH,EADQ,qCAAAG,OAGRF,GACIqF,IAAKhD,EAAKpC,MAAM2C,QAAQC,MACxByC,YAAa,mGAlHG,IAAAC,EAAAC,KAClBA,KAAKC,UAAY,IAAIC,IAAU,eAC/BF,KAAKC,UAAUE,GAAG,UAAW,SAAAxC,GAC3BoC,EAAK9C,SAAS,CAAE7B,QAAQ,IACxBuC,EAAEyC,oDAkHG,IAAAC,EACoDL,KAAK/E,MAAxDC,EADDmF,EACCnF,OAAQC,EADTkF,EACSlF,QAASC,EADlBiF,EACkBjF,OAAQC,EAD1BgF,EAC0BhF,MAAOC,EADjC+E,EACiC/E,SAAUC,EAD3C8E,EAC2C9E,KAC5C+E,GAAWpF,GAAWC,GAAYE,EAA4B,GAApB2E,KAAKT,aACrD,OACEgB,EAAAC,EAAApC,cAACqC,EAAA,SAAD,KACEF,EAAAC,EAAApC,cAACsC,EAAA,EAAD,CACEC,IAAI,WACJC,OAAO,gBACPC,SAAU1F,EACV2F,UAAU,EACVC,eAAgBf,KAAKtE,OACrByB,UAAS,WAAAzC,OAAaS,EAAU,UAAY,IAC5C6F,gBAAgB,kBAChBC,gBAAgB,mBAEhBV,EAAAC,EAAApC,cAAA,KAAGjB,UAAU,WAAb,uCACC9B,GACCkF,EAAAC,EAAApC,cAAA,QAAMjB,UAAU,SAAhB,wDAIFoD,EAAAC,EAAApC,cAAA,OACE8C,IAAI,qNACJ/D,UAAU,OACVgE,IAAI,UAGRZ,EAAAC,EAAApC,cAAA,OACEuC,IAAI,SACJxD,UAAS,UAAAzC,OAAYQ,IAAWC,EAAU,OAAS,KAEnDoF,EAAAC,EAAApC,cAAA,OAAKjB,UAAU,QACboD,EAAAC,EAAApC,cAAA,OAAKjB,UAAU,YACboD,EAAAC,EAAApC,cAAA,UACEjB,UAAU,oBACViE,wBAAsB,SAErBhG,EAAS,gBAAkB,eAE9BmF,EAAAC,EAAApC,cAAA,UACEjB,UAAU,oBACViE,wBAAsB,SAErBhG,EAAS,cAAgB,aAE5BmF,EAAAC,EAAApC,cAAA,UAAQjB,UAAU,SAASkE,QAASrB,KAAKhC,cAAzC,iBAGAuC,EAAAC,EAAApC,cAAA,UAAQjB,UAAU,SAASkE,QAASrB,KAAKb,gBAAzC,mBAIAoB,EAAAC,EAAApC,cAAA,QACEkD,OAAO,gCACP/D,OAAO,OACPd,OAAO,SACPU,UAAU,gBAEVoD,EAAAC,EAAApC,cAAA,SAAOG,KAAK,SAASvC,KAAK,OAAOqB,MAAOiD,IACxCC,EAAAC,EAAApC,cAAA,UAAQjB,UAAU,eAChBoD,EAAAC,EAAApC,cAAA,OACE8C,IAAKK,IACLpE,UAAU,eACVgE,IAAI,mBAIVZ,EAAAC,EAAApC,cAAA,UAAQjB,UAAU,SAASkE,QAASrB,KAAKpC,aAAzC,WAIF2C,EAAAC,EAAApC,cAAA,QAAMoD,GAAG,QAAQtG,GAAUA,EAAOX,MAClCgG,EAAAC,EAAApC,cAAA,QAAMoD,GAAG,QAAQtG,GAAUA,EAAOV,QAGtC+F,EAAAC,EAAApC,cAAA,KACEuC,IAAI,SACJtB,KAAK,sDACLlC,UAAU,UAEVoD,EAAAC,EAAApC,cAAA,OAAK8C,IAAKO,IAAYtE,UAAU,cAAcgE,IAAI,iBAEpDZ,EAAAC,EAAApC,cAAA,KAAGjB,UAAS,WAAAzC,OAAaS,EAAU,WAAa,KAC9CoF,EAAAC,EAAApC,cAAA,oBACO,IACLmC,EAAAC,EAAApC,cAAA,SAAOG,KAAK,WAAWmD,QAASnG,EAAMoG,SAAU3B,KAAKjC,cAEvDwC,EAAAC,EAAApC,cAAA,wBACW,IACTmC,EAAAC,EAAApC,cAAA,SACEG,KAAK,WACLmD,QAASpG,EACTqG,SAAU3B,KAAKnC,mBAGnB0C,EAAAC,EAAApC,cAAA,sBACQmC,EAAAC,EAAApC,cAAA,SAAOwD,IAAK5B,KAAKxE,MAAO+C,KAAK,OAAOsD,aAAa,UAEzDtB,EAAAC,EAAApC,cAAA,qBACQ,IACNmC,EAAAC,EAAApC,cAAA,YACEwD,IAAK5B,KAAKvF,MACVqH,KAAK,IACLD,aAAY,6EA1ORE,aCpDZC,EAAcC,QACW,cAA7BxD,OAAOyD,SAASC,UAEe,UAA7B1D,OAAOyD,SAASC,UAEhB1D,OAAOyD,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACT9E,KAAK,SAAAkF,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3H,QACfsH,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBvF,MAAM,SAAArC,GACL2H,QAAQ3H,MAAM,4CAA6CA,KCzEjE6H,IAASC,OAAO5C,EAAAC,EAAApC,cAACgF,EAAD,MAASjF,SAASkF,eAAe,SDclC,WACb,GAA6C,kBAAmBd,UAAW,CAGzE,GADkB,IAAI7D,IAAI4E,GAAwB7E,OAAOyD,UAC3CqB,SAAW9E,OAAOyD,SAASqB,OAIvC,OAGF9E,OAAO+E,iBAAiB,OAAQ,WAC9B,IAAMlB,EAAK,GAAA5H,OAAM4I,GAAN,sBAEPtB,GAiDV,SAAiCM,GAE/BmB,MAAMnB,GACH9E,KAAK,SAAAkG,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CvB,UAAUC,cAAcuB,MAAMvG,KAAK,SAAAkF,GACjCA,EAAasB,aAAaxG,KAAK,WAC7BiB,OAAOyD,SAAS+B,aAKpB5B,EAAgBC,KAGnB5E,MAAM,WACLsF,QAAQC,IACN,mEArEAiB,CAAwB5B,GAIxBC,UAAUC,cAAcuB,MAAMvG,KAAK,WACjCwF,QAAQC,IACN,+GAMJZ,EAAgBC,MCzCxB6B","file":"static/js/main.a29d73a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.58f2fad8.svg\";","module.exports = __webpack_public_path__ + \"static/media/codepen.f4beecdf.svg\";","import React, { Component, Fragment, createRef } from 'react'\nimport Dropzone from 'react-dropzone'\nimport axios from 'axios'\nimport './styles.css'\nimport githubLogo from './github.svg'\nimport codepenLogo from './codepen.svg'\nimport Clipboard from 'clipboard'\n\nconst url =\n  process.env.NODE_ENV === 'development'\n    ? 'http://localhost:3000'\n    : 'https://micro-svg-spreact.now.sh/'\n\nconst template = ({ defs, refs, style }) => `\n  <!doctype>\n  <html lang=\"en\">\n  <head>\n    <title>SVG Sprite</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta charset=\"UTF-8\" />\n    <style>\n      html { box-sizing: border-box }\n      body {\n        margin: 0;\n        padding: 0;\n        font-family: -apple-system,BlinkMacSystemFont,\"Segoe UI\",\"Roboto\",\n          \"Oxygen\",\"Ubuntu\",\"Cantarell\",\"Fira Sans\",\n          \"Droid Sans\",\"Helvetical Neue\",sans-serif;\n        font-size: 1.125rem;\n        text-align: center\n      }\n      h1{\n        font-weight: 100;\n        margin-bottom: 1em\n      }\n      small { font-size: .34em }\n      ${style}\n    </style>\n  </head>\n    \n  <body>\n    <!-- SVG Sprite -->\n    ${defs}\n    <h1>\n      SVG Sprite Demo\n      <br/>\n      <small>\n        created with <a href=\"https://elrumordelaluz.github.io/micro-svg-spreact/\">svg-spreact</a>\n      </small>\n    </h1>\n    ${refs}\n  </body>\n`\n\nconst penSettings = {\n  title: 'SVG Spreact',\n  description:\n    'SVG Sprite created with svg-spreact (https://elrumordelaluz.github.io/micro-svg-spreact/)',\n  tags: ['svg', 'svg-sprite', 'svgson', 'svg-spreact'],\n  editors: '1100',\n}\n\nclass App extends Component {\n  state = {\n    output: null,\n    loading: false,\n    copied: false,\n    error: false,\n    optimize: true,\n    tidy: true,\n  }\n\n  cname = createRef()\n  style = createRef()\n\n  componentDidMount() {\n    this.clipboard = new Clipboard('.copyButton')\n    this.clipboard.on('success', e => {\n      this.setState({ copied: true })\n      e.clearSelection()\n    })\n  }\n\n  onDrop = files => {\n    let svgs = []\n    const names = files.map(file => file.name.replace('.svg', ''))\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i]\n      const reader = new FileReader()\n      reader.readAsText(file, 'UTF-8')\n      reader.onload = ({ target }) => {\n        svgs.push(target.result)\n        if (i === files.length - 1) {\n          this.processInput(svgs, names)\n        }\n      }\n    }\n  }\n\n  processInput = (input, names) => {\n    const { optimize, tidy } = this.state\n    this.setState({ loading: true, copied: false, error: false })\n    const data = {\n      input,\n      tidy,\n      optimize,\n      names,\n      className: this.cname.current.value,\n    }\n    axios({\n      url,\n      method: 'post',\n      data,\n    })\n      .then(res => this.setState({ output: res.data, loading: false }))\n      .catch(e => {\n        this.setState({\n          loading: false,\n          output: null,\n          error: true,\n        })\n      })\n  }\n\n  resetOutput = () => this.setState({ output: null, copied: false })\n\n  handleOptimized = () => {\n    this.setState(prevState => ({\n      optimize: !prevState.optimize,\n    }))\n  }\n\n  handleTidy = () => {\n    this.setState(prevState => ({\n      tidy: !prevState.tidy,\n    }))\n  }\n\n  downloadDemo = () => {\n    const { output, loading, error } = this.state\n    if (output && !loading && !error) {\n      const element = document.createElement('a')\n      const { refs, defs } = output\n      const html = template({\n        defs,\n        refs,\n        style: this.style.current.value,\n      })\n      const file = new Blob([html], {\n        type: 'text/html',\n      })\n      const fileURL = window.URL.createObjectURL(file)\n      element.setAttribute('href', fileURL)\n      element.setAttribute('download', `demo.html`)\n      element.style.display = 'none'\n      document.body.appendChild(element)\n      element.click()\n      document.body.removeChild(element)\n      window.URL.revokeObjectURL(fileURL)\n    }\n  }\n\n  downloadSprite = () => {\n    const { output, loading, error } = this.state\n    if (output && !loading && !error) {\n      const element = document.createElement('a')\n      const { defs } = output\n      const file = new Blob([defs], {\n        type: 'image/svg+xml',\n      })\n      const fileURL = URL.createObjectURL(file)\n      element.href = fileURL\n      element.download = `sprite.svg`\n      element.click()\n      window.URL.revokeObjectURL(fileURL)\n    }\n  }\n\n  prefillPen = () => {\n    const {\n      output: { defs, refs },\n    } = this.state\n    return JSON.stringify({\n      ...penSettings,\n      html: `<!-- SVG Sprite -->\n${defs}\n<!-- SVG References -->\n${refs}`,\n      css: this.style.current.value,\n      css_starter: 'normalize',\n    })\n  }\n\n  render() {\n    const { output, loading, copied, error, optimize, tidy } = this.state\n    const penValue = output && !loading && !error ? this.prefillPen() : ''\n    return (\n      <Fragment>\n        <Dropzone\n          key=\"dropzone\"\n          accept=\"image/svg+xml\"\n          disabled={loading}\n          multiple={true}\n          onDropAccepted={this.onDrop}\n          className={`wrapper ${loading ? 'loading' : ''}`}\n          activeClassName=\"wrapper__active\"\n          rejectClassName=\"wrapper__reject\"\n        >\n          <p className=\"message\">Drop SVG files to create the Sprite</p>\n          {error && (\n            <span className=\"error\">\n              An error was verified during your last svg processed\n            </span>\n          )}\n          <img\n            src=\"https://camo.githubusercontent.com/faf6e2edc6037845c56e7b1f5c9fd5c7fcdecdad/68747470733a2f2f63646e2e7261776769742e636f6d2f656c72756d6f7264656c616c757a2f7376672d737072656163742f32623538313138622f6c6f676f2e737667\"\n            className=\"logo\"\n            alt=\"logo\"\n          />\n        </Dropzone>\n        <div\n          key=\"output\"\n          className={`output ${output && !loading ? 'show' : ''}`}\n        >\n          <pre className=\"code\">\n            <div className=\"controls\">\n              <button\n                className=\"button copyButton\"\n                data-clipboard-target=\"#defs\"\n              >\n                {copied ? 'Sprite Copied' : 'Copy Sprite'}\n              </button>\n              <button\n                className=\"button copyButton\"\n                data-clipboard-target=\"#refs\"\n              >\n                {copied ? 'Refs Copied' : 'Copy Refs'}\n              </button>\n              <button className=\"button\" onClick={this.downloadDemo}>\n                Download Demo\n              </button>\n              <button className=\"button\" onClick={this.downloadSprite}>\n                Download Sprite\n              </button>\n\n              <form\n                action=\"https://codepen.io/pen/define\"\n                method=\"POST\"\n                target=\"_blank\"\n                className=\"codepen_form\"\n              >\n                <input type=\"hidden\" name=\"data\" value={penValue} />\n                <button className=\"codepen_btn\">\n                  <img\n                    src={codepenLogo}\n                    className=\"codepen_logo\"\n                    alt=\"codepen logo\"\n                  />\n                </button>\n              </form>\n              <button className=\"button\" onClick={this.resetOutput}>\n                ✕\n              </button>\n            </div>\n            <code id=\"defs\">{output && output.defs}</code>\n            <code id=\"refs\">{output && output.refs}</code>\n          </pre>\n        </div>\n        <a\n          key=\"github\"\n          href=\"https://github.com/elrumordelaluz/micro-svg-spreact\"\n          className=\"github\"\n        >\n          <img src={githubLogo} className=\"github_logo\" alt=\"github logo\" />\n        </a>\n        <p className={`settings${loading ? ' loading' : ''}`}>\n          <label>\n            tidy{' '}\n            <input type=\"checkbox\" checked={tidy} onChange={this.handleTidy} />\n          </label>\n          <label>\n            optimize{' '}\n            <input\n              type=\"checkbox\"\n              checked={optimize}\n              onChange={this.handleOptimized}\n            />\n          </label>\n          <label>\n            class <input ref={this.cname} type=\"text\" defaultValue=\"icon\" />\n          </label>\n          <label>\n            style{' '}\n            <textarea\n              ref={this.style}\n              rows=\"5\"\n              defaultValue={`.icon { \n  width: 50px; \n  height: 50px;\n  margin: .5em;\n}`}\n            />\n          </label>\n        </p>\n      </Fragment>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}